import pyvisa as visa
import sys
from qcodes.instrument.base import Instrument
from qcodes.instrument.parameter import Parameter

zero = ((0).to_bytes(2, 'little', signed=True)).decode("latin1")

def rest(ch1data, ch2data, num_restpoints):
    for i in range(int(num_restpoints)):
        ch1data.append(0)
        ch2data.append(0)

def pix(ch1data, ch2data, pitime):
    for i in range(int(pitime)):
        ch1data.append(1)
        ch2data.append(0)

def piy(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(0)
        ch2data.append(1)

def min_pix(ch1data, ch2data, pitime):
    for i in range(int(pitime)):
        ch1data.append(-1)
        ch2data.append(0)

def min_piy(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(0)
        ch2data.append(-1)

def pi_2x(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(1)
        ch2data.append(0)

def pi_2y(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(0)
        ch2data.append(1)

def min_pi_2x(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(-1)
        ch2data.append(0)

def min_pi_2y(ch1data, ch2data, pi2time):
    for i in range(int(pi2time)):
        ch1data.append(0)
        ch2data.append(-1)

class SDG6022X():
    def __init__(self, name='SDG6022X', SDGnum=1, settings=None, **kwargs) -> None:
        rm = visa.ResourceManager()
        if SDGnum == 1:
            self.SDG = rm.open_resource('USB0::0xF4EC::0x1101::SDG6XFCC8R0037::INSTR')
            self.SDG.write("C1:BSWV HLEV,0.9439,LLEV,-0.9457") # calibrate IQ voltages
            self.SDG.write("C2:BSWV HLEV,0.9426,LLEV,-0.9447")
            self.SDG.write("C1:BTWV STATE,ON,TRSR,EXT,TIME,1") # set to triggered mode
            self.SDG.write("C2:BTWV STATE,ON,TRSR,EXT,TIME,1")
            self.SDG.write("C1:WVDT WVNM,wave1,WAVEDATA,%s" % (zero), encoding='latin1') # set to arb mode with 0 output
            self.SDG.write("C1:ARWV NAME,wave1")
            self.SDG.write("C2:WVDT WVNM,wave2,WAVEDATA,%s" % (zero), encoding='latin1')
            self.SDG.write("C2:ARWV NAME,wave2")
            self.SDG.write("C1:OUTP ON") # turn on IQ outputs
            self.SDG.write("C2:OUTP ON")
        # elif SDGnum == 2:
        #     self.SDG = rm.open_resource('')
        #     self.SDG.query('*IDN?')

    def upload_waveform(self, freq, ch1data, ch2data):
        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1data), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2data), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_T1_seq(self, pitime, buffer):
        psperiod = 2*buffer + pitime

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pix(ch1data, ch2data, pitime)
        rest(ch1data, ch2data, buffer)
        
        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_T2E_seq(self, pi_2time, pitime, tau, buffer, mode): # mode = 0: normal, mode = 1: diff
        psperiod = 2*buffer + 2*pi_2time + 2*tau + pitime

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pi_2y(ch1data, ch2data, pi_2time)
        rest(ch1data, ch2data, tau)
        pix(ch1data, ch2data, pitime)
        rest(ch1data, ch2data, tau)
        if mode == 0:
            pi_2y(ch1data, ch2data, pi_2time)
        elif mode == 1:
            min_pi_2y(ch1data, ch2data, pi_2time)
        rest(ch1data, ch2data, buffer)

        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_T2R_seq(self, pi_2time, tau, buffer, mode): # mode = 0: normal, mode = 1: diff
        psperiod = 2*buffer + 2*pi_2time + tau

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pi_2y(ch1data, ch2data, pi_2time)
        rest(ch1data, ch2data, tau)
        if mode == 0:
            pi_2y(ch1data, ch2data, pi_2time)
        elif mode == 1:
            min_pi_2y(ch1data, ch2data, pi_2time)
        rest(ch1data, ch2data, buffer)

        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_ODMR_seq(self, pulse_width, buffer):
        psperiod = 2*buffer + pulse_width

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pix(ch1data, ch2data, pulse_width)
        rest(ch1data, ch2data, buffer)
        
        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_Rabi_seq(self, pulse_width, buffer):
        psperiod = 2*buffer + pulse_width

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pix(ch1data, ch2data, pulse_width)
        rest(ch1data, ch2data, buffer)
        
        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")

    def send_XY8_seq(self, pitime, pi_2time, tau, numxy8, buffer, mode): # mode = 0: cos mag, mode = 1: sin mag, mode = 2: diff meas, mode = 3: 3pi/2
        psperiod = 2*buffer + 2*pi_2time + numxy8*tau*8 + numxy8*pitime*8

        ch1data = []
        ch2data = []

        rest(ch1data, ch2data, buffer)
        pi_2y(ch1data, ch2data, pi_2time)
        rest(ch1data, ch2data, int(tau/2))

        for i in range(int(numxy8)):
            pix(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            piy(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            pix(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            piy(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            piy(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            pix(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            piy(ch1data, ch2data, pitime)
            rest(ch1data, ch2data, tau)
            pix(ch1data, ch2data, pitime)
            if i<(numxy8-1):
                rest(ch1data, ch2data, tau)

        rest(ch1data, ch2data, int(tau/2))

        if mode == 0:
            pi_2y(ch1data, ch2data, pi_2time)

        if mode == 1:
            pi_2x(ch1data, ch2data, pi_2time)

        if mode == 2:
            min_pi_2y(ch1data, ch2data, pi_2time)

        if mode == 3:
            pi_2y(ch1data, ch2data, 3*pi_2time)

        rest(ch1data, ch2data, buffer)
        freq = (1/psperiod)*1e9

        ch1bindata = b''
        ch2bindata = b''

        for a in ch1data:
            if a==-1:
                ch1bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch1bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch1bindata += (32767).to_bytes(2, 'little', signed=True)
        for a in ch2data:
            if a==-1:
                ch2bindata += (-32768).to_bytes(2, 'little', signed=True)
            elif a==0: 
                ch2bindata += (0).to_bytes(2, 'little', signed=True)
            elif a==1:
                ch2bindata += (32767).to_bytes(2, 'little', signed=True)

        ch1bindata = ch1bindata.decode("latin1")
        ch2bindata = ch2bindata.decode("latin1")

        self.SDG.write("C1:WVDT WVNM,wave1,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch1bindata), encoding='latin1')
        self.SDG.write("C1:ARWV NAME,wave1")
        self.SDG.write("C2:WVDT WVNM,wave2,FREQ," + str(freq) + ",WAVEDATA,%s" % (ch2bindata), encoding='latin1')
        self.SDG.write("C2:ARWV NAME,wave2")      

    def turn_off(self):
        self.SDG.write("C1:OUTP OFF")
        self.SDG.write("C2:OUTP OFF")