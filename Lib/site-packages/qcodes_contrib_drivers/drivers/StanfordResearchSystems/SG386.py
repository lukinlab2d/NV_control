"""
This file is part of B00 codes based on b26_toolkit. Questions are addressed to Hoang Le.
"""


import pyvisa as visa
import sys
from qcodes.instrument.base import Instrument
from qcodes.instrument.parameter import Parameter

class SRS():
    def __init__(self, name='SRS_SG386', SRSnum=1, settings=None, **kwargs) -> None:
        rm = visa.ResourceManager()
        self.SRSnum = SRSnum
        if SRSnum == 1:
            self.srs = rm.open_resource('COM' + str(6))
            self.srs.baud_rate = 115200
            self.srs.query('*IDN?')
        elif SRSnum == 2:
            self.srs = rm.open_resource('COM' + str(8))
            self.srs.baud_rate = 115200
            self.srs.query('*IDN?')
        elif SRSnum == 3:
            self.srs = rm.open_resource('USB0::0x0AAD::0x006E::102580::INSTR') # Rohde Schwarz SMC 100
            self.srs.query('*IDN?')
        elif SRSnum == 4:
            self.srs = rm.open_resource('COM' + str(4))
            self.srs.baud_rate = 115200
            self.srs.query('*IDN?')
        
    def errorCheck(self):
        err = self.srs.query('LERR?')
        if int(err) != 0:
            print('SRS error: error code', int(err),'. Please refer to SRS manual for a description of error codes.')
            sys.exit()

    def set_freq(self, freq, units='Hz'):
        if self.SRSnum == 3:
            self.srs.write('FREQ ' + str(freq) + units)
        else:
            self.srs.write('FREQ ' + str(freq) + ' ' + units)
            self.errorCheck()
    
    def enable_RFOutput(self):
        if self.SRSnum == 3:
            self.srs.write('OUTP 1')
        else:
            self.srs.write('ENBR 1')
            self.errorCheck()

    def disable_RFOutput(self):
        if self.SRSnum == 3:
            self.srs.write('OUTP 0')
        else:
            self.srs.write('ENBR 0')
            self.errorCheck()
        
    def set_RFAmplitude(self, RFamplitude, units='dBm'):
        if self.SRSnum == 3:
            self.srs.write('POW:MODE CW')
            self.srs.write('POW ' + str(RFamplitude))
        else:
            self.srs.write('AMPR ' + str(RFamplitude) + ' ' + units)
            self.errorCheck()

    def enableIQmodulation(self):
        self.errorCheck()
        #Enable modulation
        self.srs.write('MODL 1')
        self.errorCheck()
        #Set modulation type to IQ
        self.srs.write('TYPE 6')
        self.errorCheck()
        #Set IQ modulation function to external
        self.srs.write('QFNC 5')
        
    def disableModulation(self):
        if self.SRSnum == 3:
            self.srs.write('MOD:STAT OFF')
        else:
            self.srs.write('MODL 0')
            self.errorCheck()
        
    def queryModulationStatus(self):
        status = self.srs.query('MODL?')
        self.errorCheck()
        if status=='1\r\n':
            print('SRS modulation is on...')
            IQstatus = self.srs.query('TYPE?')
            self.errorCheck()
            if IQstatus=='6\r\n':
                print('...and is set to IQ')
            else:
                print('...but is not set to IQ.')
        else:
            print('SRS modulation is off.')
        return status

# if __name__ == '__main__':
#     srs = SRS()
#     srs.set_RFAmplitude(-10)
#     srs.set_freq(3e9)