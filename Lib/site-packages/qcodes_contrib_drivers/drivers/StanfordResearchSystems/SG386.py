# """
#     This file is part of b26_toolkit, a pylabcontrol add-on for experiments in Harvard LISE B26.
#     Copyright (C) <2016>  Arthur Safira, Jan Gieseler, Aaron Kabcenell

#     b26_toolkit is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     b26_toolkit is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with b26_toolkit.  If not, see <http://www.gnu.org/licenses/>.
# """


import pyvisa as visa
import sys
from qcodes.instrument.base import Instrument
from qcodes.instrument.parameter import Parameter

class SRS():
    def __init__(self, name='SRS_SG386', SRSnum=1, settings=None, **kwargs) -> None:
        rm = visa.ResourceManager()
        if SRSnum == 1:
            self.srs = rm.open_resource('COM' + str(6))
            self.srs.baud_rate = 115200
            self.srs.query('*IDN?')
        elif SRSnum == 2:
            self.srs = rm.open_resource('COM' + str(8))
            self.srs.baud_rate = 115200
            self.srs.query('*IDN?')
        
    def errorCheck(self):
        err = self.srs.query('LERR?')
        if int(err) != 0:
            print('SRS error: error code', int(err),'. Please refer to SRS manual for a description of error codes.')
            sys.exit()

    def set_freq(self, freq, units='Hz'):
        self.srs.write('FREQ ' + str(freq) + ' ' + units)
        self.errorCheck()
    
    def enable_RFOutput(self):
        self.srs.write('ENBR 1')
        self.errorCheck()

    def disable_RFOutput(self):
        self.srs.write('ENBR 0')
        self.errorCheck()
        
    def set_RFAmplitude(self, RFamplitude, units='dBm'):
        self.srs.write('AMPR '+str(RFamplitude)+' '+units)
        self.errorCheck()

    def enableIQmodulation(self):
        self.errorCheck()
        #Enable modulation
        self.srs.write('MODL 1')
        self.errorCheck()
        #Set modulation type to IQ
        self.srs.write('TYPE 6')
        self.errorCheck()
        #Set IQ modulation function to external
        self.srs.write('QFNC 5')
        
    def disableModulation(self):
        self.srs.write('MODL 0')
        self.errorCheck()
        
    def queryModulationStatus(self):
        status = self.srs.query('MODL?')
        self.errorCheck()
        if status=='1\r\n':
            print('SRS modulation is on...')
            IQstatus = self.srs.query('TYPE?')
            self.errorCheck()
            if IQstatus=='6\r\n':
                print('...and is set to IQ')
            else:
                print('...but is not set to IQ.')
        else:
            print('SRS modulation is off.')
        return status

# if __name__ == '__main__':
#     srs = SRS()
#     srs.set_RFAmplitude(-10)
#     srs.set_freq(3e9)